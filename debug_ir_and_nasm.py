import sys
from antlr4 import FileStream, CommonTokenStream

from src.lexer.MyLangLexer import MyLangLexer
from src.parser.MyLangParser import MyLangParser
from src.AST.ASTBuilder import ASTBuilder
from src.semantic.semantic_analyzer import SemanticAnalyzer
from src.IR.ir_generator import IRGenerator
from src.optimizer.ir_optimizer import IROptimizer
from src.Nasm.nasm_generator import NASMGenerator

def debug_compile(source_file: str):
    print(f"üîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {source_file}\n")

    # 1. –õ–µ–∫—Å–µ—Ä –∏ –ø–∞—Ä—Å–µ—Ä
    input_stream = FileStream(source_file, encoding="utf-8")
    lexer = MyLangLexer(input_stream)
    token_stream = CommonTokenStream(lexer)
    parser = MyLangParser(token_stream)
    tree = parser.program()

    # 2. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ AST
    print("=== üß± AST ===")
    ast = ASTBuilder().visit(tree)
    print(ast)
    print()

    # 3. –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    print("=== ‚úÖ Semantic ===")
    SemanticAnalyzer().analyze(ast)
    print("Semantic OK\n")

    # 4. IR –¥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    ir = IRGenerator().generate(ast)
    print("=== üßæ IR –¥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ===")
    for instr in ir:
        print(instr)
    print()



    # 6. NASM
    print("=== ‚öôÔ∏è NASM-–∫–æ–¥ ===")
    nasm_code = NASMGenerator().generate(ir)
    print(nasm_code)

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python debug_ir_and_nasm.py <–≤—Ö–æ–¥–Ω–æ–π_—Ñ–∞–π–ª.my>")
        sys.exit(1)

    debug_compile(sys.argv[1])
