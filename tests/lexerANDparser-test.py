import sys
from antlr4.error.ErrorListener import ConsoleErrorListener

from antlr4 import *
from src.lexer.MyLangLexer import MyLangLexer
from src.parser.MyLangParser import MyLangParser


def format_tree(tree, parser, indent=0):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ä–µ–≤–æ —Ä–∞–∑–±–æ—Ä–∞ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏"""
    if tree.getChildCount() == 0:
        return "  " * indent + tree.getText()

    rule_name = parser.ruleNames[tree.getRuleIndex()] if hasattr(tree, 'getRuleIndex') else str(tree)
    result = "  " * indent + rule_name + "\n"

    for i in range(tree.getChildCount()):
        result += format_tree(tree.getChild(i), parser, indent + 1) + "\n"

    return result.strip()


def parse_code(code: str):
    input_stream = InputStream(code)

    lexer = MyLangLexer(input_stream)
    token_stream = CommonTokenStream(lexer)

    # üìå –õ–µ–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    lexer.reset()
    token_stream.fill()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã
    print("\nüéØ –¢–æ–∫–µ–Ω—ã, —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –ª–µ–∫—Å–µ—Ä–æ–º:")
    for token in token_stream.tokens:
        print(f"–¢–æ–∫–µ–Ω: {lexer.symbolicNames[token.type]} = '{token.text}' "
              f"(—Å—Ç—Ä–æ–∫–∞ {token.line}, –ø–æ–∑–∏—Ü–∏—è {token.column})")

    parser = MyLangParser(token_stream)

    # üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–µ—Ä–∞
    parser.removeErrorListeners()
    parser.addErrorListener(ConsoleErrorListener.INSTANCE)

    # üìå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    #print("\nüîç –¢–æ–∫–µ–Ω—ã –ø–µ—Ä–µ–¥ —Ä–∞–∑–±–æ—Ä–æ–º –ø–∞—Ä—Å–µ—Ä–æ–º:")
    #for token in token_stream.tokens:
        #print(f"–¢–æ–∫–µ–Ω: {lexer.symbolicNames[token.type]} = '{token.text}' "
              #f"(—Å—Ç—Ä–æ–∫–∞ {token.line}, –ø–æ–∑–∏—Ü–∏—è {token.column})")

    tree = parser.program()

    # üìå –í—ã–≤–æ–¥ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ —Ä–∞–∑–±–æ—Ä–∞
    print("\nüå≥ –î–µ—Ä–µ–≤–æ —Ä–∞–∑–±–æ—Ä–∞ (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ):")
    print(format_tree(tree, parser))


# ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —è–∑—ã–∫–∞
code = """
{
    
    let x: int = 5;
    let y: bool = true;
    let name: string = "Hello";
    let pi: float = 3.14;
    let radius: float = 2.5;
    let area: float = pi * radius * radius;
    print(area);
    
    print(x);
    print(name);

    
    if (x > 3) { print("x –±–æ–ª—å—à–µ 3"); }
    else { print("x –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω 3"); }

    
    for (let i: int = 0; i < 5; i = i + 1) { 
    for (let j: int = 0; j < 5; j= j +1) { print(j);}
    print(i);}
    for (;;) { print("–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª"); }

    
    while (x > 0) {
        print(x);
        x = x - 1;
    }

    
    function square(n: int): int {
        return n * n;
    }
    let result: int = square(4);
    print(result);
    
    

    
    
    try {
        let z: int = 5 / 0;
    } catch (e) {
        print("–û—à–∏–±–∫–∞ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å");
    }

    
    match x {
        case 1: print("–û–¥–∏–Ω");
        case 5: print("–ü—è—Ç—å");
        default: print("–î—Ä—É–≥–æ–µ —á–∏—Å–ª–æ");
    }
}
"""

parse_code(code)
